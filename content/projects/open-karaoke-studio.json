{
  "title": "Open Karaoke Studio",
  "slug": "open-karaoke-studio",
  "description": "Sole developer of an open-source, AI-powered karaoke studio. A modern web application for generating karaoke tracks by separating vocals from music using state-of-the-art AI.",
  "longDescription": "Open Karaoke Studio is a modern, open-source web application that lets users generate instrumental karaoke tracks from their favorite songs using AI-powered vocal separation. Frustrated by the lack of available karaoke versions for many songs, I built this project to empower anyone to create their own karaoke tracks. The platform is designed for self-hosting, with a user-friendly React frontend and a Python/Flask backend leveraging Demucs for high-quality audio processing.",
  "liveUrl": "",
  "repoUrl": "",
  "tech": [
    "React 19",
    "TypeScript",
    "Vite",
    "pnpm",
    "TanStack Query",
    "Zustand",
    "Tailwind CSS",
    "Shadcn/UI",
    "Python",
    "Flask",
    "Demucs",
    "Celery",
    "SQLAlchemy",
    "Socket.IO"
  ],
  "coverImage": "/images/projects/open-karaoke-studio/placeholder-cover.png",
  "screenshots": [
    "/images/projects/open-karaoke-studio/player.png",
    "/images/projects/open-karaoke-studio/search.png",
    "/images/projects/open-karaoke-studio/library.png"
  ],
  "goals": "The main goal was to make AI-powered karaoke track generation accessible to everyone, especially for songs not available in traditional karaoke libraries. The project aims to provide a fast, modern, and self-hosted solution for karaoke enthusiasts, with a focus on usability, performance, and open-source collaboration.",
  "role": [
    "Sole Developer (Full-Stack)"
  ],
  "techStack": "React 19 and TypeScript for a modern, type-safe frontend; Vite for fast builds; TanStack Query for data fetching; Zustand for state management; Tailwind CSS and Shadcn/UI for styling; Python 3.10+ and Flask for the backend API; Demucs and PyTorch for AI audio processing; Celery (planned) for async task handling; SQLAlchemy for database management; Socket.IO for real-time updates.",
  "features": [
    {
      "title": "AI Vocal Separation",
      "description": "Generate karaoke tracks by separating vocals from music using Demucs."
    },
    {
      "title": "Song Upload & Processing",
      "description": "Upload songs and process them asynchronously to create instrumentals."
    },
    {
      "title": "Song Library",
      "description": "Manage and download your processed karaoke tracks in a user-friendly library."
    },
    {
      "title": "YouTube Song Search",
      "description": "Search for songs from YouTube and automatically generate karaoke tracks."
    },
    {
      "title": "Modern Web Interface",
      "description": "Responsive, fast, and easy-to-use interface built with React, Tailwind, and Shadcn/UI."
    },
    {
      "title": "Self-Hosting",
      "description": "Designed for easy self-hosting and personal use."
    }
  ],
  "challenges": [
    {
      "challenge": "Integrating AI audio separation (Demucs) into a web workflow",
      "solution": "Used a Python backend with Flask to orchestrate Demucs and handle file processing, ensuring robust error handling and clear API contracts."
    },
    {
      "challenge": "Managing asynchronous processing for long-running audio tasks",
      "solution": "Designed the backend to support task queuing and status polling, with plans to integrate Celery for production-ready async processing."
    },
    {
      "challenge": "Building a seamless, modern user experience",
      "solution": "Leveraged React 19, Vite, Tailwind CSS, and Shadcn/UI to create a responsive and intuitive frontend."
    },
    {
      "challenge": "Ensuring easy self-hosting and open-source contribution",
      "solution": "Structured the project as a pnpm monorepo, provided clear documentation, and used permissive open-source licensing."
    }
  ],
  "learnings": "This project deepened my experience with full-stack development, AI audio processing, and modern frontend tooling. I learned to integrate state-of-the-art machine learning models into a web workflow, manage asynchronous tasks, and design for both usability and maintainability. Open sourcing the project also gave me insight into documentation and community-driven development.",
  "opensource": true
}